services:
  api:
    build: 
      context: .
      args:
        - USER_ID=${UID:-1000}
        - GROUP_ID=${GID:-1000}
    image: augmentation:latest
    restart: always
    ports:
      - "8000:8000"
    user: "${UID:-1000}:${GID:-1000}"
    depends_on:
      - redis
      - db
    environment:
      - REDIS_HOST=${REDIS_HOST}
    networks:
      - app_network

  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgresql/conf.d/postgresql.conf:/var/lib/postgresql/data/postgresql.conf
    networks:
      - app_network

  minio:
    image: minio/minio:latest
    networks:
      - app_network
    ports:
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USERNAME}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    volumes:
      - ./minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  celery_worker:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.services
      args:
        - USER_ID=${UID:-1000}
        - GROUP_ID=${GID:-1000}
    restart: always
    command: celery -A app.celery worker --loglevel=info
    depends_on:
      - db
      - redis
      - api
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    user: "${UID:-1000}:${GID:-1000}"
    networks:
      - app_network

  redis:
    image: redis:latest
    restart: always
    networks:
      - app_network
    user: "redis:redis"

volumes:
  postgres_data:

networks:
  app_network: